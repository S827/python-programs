# Project Documentation: Password Security Checker using PwnedPasswords API

## Project Overview

This project provides a command-line tool to check if a password has been exposed in any known data breaches using the [PwnedPasswords API](https://haveibeenpwned.com/API/v3#PwnedPasswords). It uses the SHA-1 hashing algorithm to securely query the API, and only the first 5 characters of the hashed password are sent to the server, ensuring privacy. The server responds with potential matching hash suffixes, and the tool checks if the password has been breached by comparing the rest of the hash.

### Key Features:
- Securely checks if a password has been leaked in any data breaches.
- Uses the k-Anonymity model to protect the privacy of the user's password during the check.
- Provides actionable feedback to the user if their password has been compromised.

---

## Requirements

- **Python 3.x**
- **Requests** library: `pip install requests`

---

## Code Structure

### 1. `request_api_data(query)`
This function sends a request to the PwnedPasswords API using the first 5 characters of the hashed password (SHA-1).

**Parameters**:
- `query`: The first 5 characters of the SHA-1 hashed password.

**Returns**:
- The raw response from the API containing potential hash suffixes and breach counts.

**Raises**:
- `RuntimeError` if the API request fails (non-200 status code).

```python
def request_api_data(query):
    url = 'https://api.pwnedpasswords.com/range/' + query
    res = requests.get(url)
    if res.status_code != 200:
        raise RuntimeError(f"Error fetching: {res.status_code}, check the api and try again")
    return res
```

---

### 2. `read_res(response)`
This function reads and prints the raw text response from the API for debugging or exploration.

**Parameters**:
- `response`: The HTTP response object from the API request.

```python
def read_res(response):
    print(response.text)
```

---

### 3. `get_password_leak_count(hashes, hash_to_check)`
This function processes the response from the API, checks if the hashed password suffix matches any returned results, and returns the number of times the password has been leaked.

**Parameters**:
- `hashes`: The response from the API (in text format).
- `hash_to_check`: The remaining part of the SHA-1 hash (after the first 5 characters) to check against the API's response.

**Returns**:
- The count of how many times the password was found in data breaches.

```python
def get_password_leak_count(hashes, hash_to_check):
    hashes = (line.split(':') for line in hashes.text.splitlines())
    for h, count in hashes:
        if h == hash_to_check:
            return count
    return 0
```

---

### 4. `pwned_api_check(password)`
This function hashes the user's password using SHA-1, queries the PwnedPasswords API using the first 5 characters of the hash, and checks if the rest of the hash matches any breach results.

**Parameters**:
- `password`: The plaintext password to check.

**Returns**:
- The number of times the password was found in data breaches.

```python
def pwned_api_check(password):
    sha1password = hashlib.sha1(password.encode('utf-8')).hexdigest().upper()
    first5_char, tail = sha1password[:5], sha1password[5:]
    response = request_api_data(first5_char)
    return get_password_leak_count(response, tail)
```

---

### 5. `main(args)`
This is the main function that accepts a list of passwords as arguments, checks each one, and prints whether it was found in data breaches or not.

**Parameters**:
- `args`: A list of plaintext passwords passed via the command line.

**Returns**:
- `'done'` when the process completes.

```python
def main(args):
    for password in args:
        count = pwned_api_check(password)
        if count:
            print(f"{password} was found {count} times... you should probably change your password.")
        else:
            print(f"{password} was not found, carry on!")
    return 'done'
```

---

## Usage

1. **Clone the repository or copy the script** to your local machine.
2. **Install dependencies** (if not already installed):
   ```bash
   pip install requests
   ```
3. **Run the script** by passing passwords as arguments:
   ```bash
   python password_checker.py mypassword anotherpassword
   ```

### Example Output:

```bash
mypassword was found 1000 times... you should probably change your password.
anotherpassword was not found, carry on!
```

---

## Security Considerations

- **Privacy Protection**: The script follows the PwnedPasswords API's k-Anonymity model, where only the first 5 characters of the hashed password are sent to the server. This ensures that the full password is never exposed to the API or any external system.
  
- **SHA-1 Hashing**: The script uses SHA-1 hashing to comply with the PwnedPasswords API. Note that while SHA-1 is considered weak for cryptographic purposes, it is still used here for the purpose of password checking.

---

## Future Improvements

- **Batch Processing**: Add support for reading passwords from a file for bulk checking.
- **Parallel Requests**: Use asynchronous requests to handle large batches of passwords more efficiently.
- **Enhanced Feedback**: Provide more detailed suggestions on password security based on breach counts.

---

## License

This project is licensed under the MIT License.

--- 

## Acknowledgements

- This project uses the **[PwnedPasswords API](https://haveibeenpwned.com/API/v3#PwnedPasswords)** to check for password breaches.
- **Requests Library** for handling HTTP requests.
