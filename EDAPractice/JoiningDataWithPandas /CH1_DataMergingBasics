{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9119730,"sourceType":"datasetVersion","datasetId":5505129}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-08-06T18:42:31.404087Z","iopub.execute_input":"2024-08-06T18:42:31.404483Z","iopub.status.idle":"2024-08-06T18:42:31.415916Z","shell.execute_reply.started":"2024-08-06T18:42:31.404451Z","shell.execute_reply":"2024-08-06T18:42:31.414103Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"/kaggle/input/joiningpracticedatasets/licenses (2).p\n/kaggle/input/joiningpracticedatasets/ward (2).p\n/kaggle/input/joiningpracticedatasets/WorldBank_POP.csv\n/kaggle/input/joiningpracticedatasets/taxi_owners.p\n/kaggle/input/joiningpracticedatasets/movies.p\n/kaggle/input/joiningpracticedatasets/ratings.p\n/kaggle/input/joiningpracticedatasets/actors_movies.csv\n/kaggle/input/joiningpracticedatasets/business_owners.p\n/kaggle/input/joiningpracticedatasets/stations.p\n/kaggle/input/joiningpracticedatasets/taglines.p\n/kaggle/input/joiningpracticedatasets/cta_calendar.p\n/kaggle/input/joiningpracticedatasets/WorldBank_GDP.csv\n/kaggle/input/joiningpracticedatasets/crews.p\n/kaggle/input/joiningpracticedatasets/census (1).p\n/kaggle/input/joiningpracticedatasets/cta_ridership.p\n/kaggle/input/joiningpracticedatasets/financials.p\n/kaggle/input/joiningpracticedatasets/zip_demo (2).p\n/kaggle/input/joiningpracticedatasets/casts.p\n/kaggle/input/joiningpracticedatasets/land_use.p\n/kaggle/input/joiningpracticedatasets/movie_to_genres.p\n/kaggle/input/joiningpracticedatasets/taxi_vehicles.p\n","output_type":"stream"}]},{"cell_type":"code","source":"ward = pd.read_pickle('/kaggle/input/joiningpracticedatasets/ward (2).p')\nward.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-06T18:43:25.703043Z","iopub.execute_input":"2024-08-06T18:43:25.703448Z","iopub.status.idle":"2024-08-06T18:43:25.727239Z","shell.execute_reply.started":"2024-08-06T18:43:25.703418Z","shell.execute_reply":"2024-08-06T18:43:25.726045Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"  ward            alderman                          address    zip\n0    1  Proco \"Joe\" Moreno        2058 NORTH WESTERN AVENUE  60647\n1    2       Brian Hopkins       1400 NORTH  ASHLAND AVENUE  60622\n2    3          Pat Dowell          5046 SOUTH STATE STREET  60609\n3    4    William D. Burns  435 EAST 35TH STREET, 1ST FLOOR  60616\n4    5  Leslie A. Hairston            2325 EAST 71ST STREET  60649","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ward</th>\n      <th>alderman</th>\n      <th>address</th>\n      <th>zip</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Proco \"Joe\" Moreno</td>\n      <td>2058 NORTH WESTERN AVENUE</td>\n      <td>60647</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Brian Hopkins</td>\n      <td>1400 NORTH  ASHLAND AVENUE</td>\n      <td>60622</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Pat Dowell</td>\n      <td>5046 SOUTH STATE STREET</td>\n      <td>60609</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>William D. Burns</td>\n      <td>435 EAST 35TH STREET, 1ST FLOOR</td>\n      <td>60616</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>Leslie A. Hairston</td>\n      <td>2325 EAST 71ST STREET</td>\n      <td>60649</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"ward.info()","metadata":{"execution":{"iopub.status.busy":"2024-08-06T18:43:31.823020Z","iopub.execute_input":"2024-08-06T18:43:31.823423Z","iopub.status.idle":"2024-08-06T18:43:31.847289Z","shell.execute_reply.started":"2024-08-06T18:43:31.823366Z","shell.execute_reply":"2024-08-06T18:43:31.846143Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 50 entries, 0 to 49\nData columns (total 4 columns):\n #   Column    Non-Null Count  Dtype \n---  ------    --------------  ----- \n 0   ward      50 non-null     object\n 1   alderman  50 non-null     object\n 2   address   50 non-null     object\n 3   zip       50 non-null     object\ndtypes: object(4)\nmemory usage: 1.7+ KB\n","output_type":"stream"}]},{"cell_type":"code","source":"ward.describe()","metadata":{"execution":{"iopub.status.busy":"2024-08-06T18:43:39.294313Z","iopub.execute_input":"2024-08-06T18:43:39.294728Z","iopub.status.idle":"2024-08-06T18:43:39.312690Z","shell.execute_reply.started":"2024-08-06T18:43:39.294695Z","shell.execute_reply":"2024-08-06T18:43:39.311435Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"       ward            alderman                    address    zip\ncount    50                  50                         50     50\nunique   50                  50                         50     34\ntop       1  Proco \"Joe\" Moreno  2058 NORTH WESTERN AVENUE  60647\nfreq      1                   1                          1      2","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ward</th>\n      <th>alderman</th>\n      <th>address</th>\n      <th>zip</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>50</td>\n      <td>50</td>\n      <td>50</td>\n      <td>50</td>\n    </tr>\n    <tr>\n      <th>unique</th>\n      <td>50</td>\n      <td>50</td>\n      <td>50</td>\n      <td>34</td>\n    </tr>\n    <tr>\n      <th>top</th>\n      <td>1</td>\n      <td>Proco \"Joe\" Moreno</td>\n      <td>2058 NORTH WESTERN AVENUE</td>\n      <td>60647</td>\n    </tr>\n    <tr>\n      <th>freq</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}